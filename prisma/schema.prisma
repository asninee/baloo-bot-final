generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("databaseUrl")
  relationMode = "prisma"
}

model User {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  guildId       String
  updatedAt     DateTime        @updatedAt
  userId        String          @unique
  guild         Guild           @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  ChatbotSystem ChatbotSystem[]
  AfkSystem     AfkSystem?

  @@index([guildId])
}

model Guild {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  guildId        String           @unique
  updatedAt      DateTime         @updatedAt
  channels       Channel[]
  threads        Thread[]
  users          User[]
  WelcomeSystem  WelcomeSystem?
  LeaveSystem    LeaveSystem?
  LogSystem      LogSystem?
  ChatbotSystem  ChatbotSystem[]
  AfkSystem      AfkSystem[]
  LockdownSystem LockdownSystem[]
}

model Channel {
  id             Int             @id @default(autoincrement())
  guildId        String
  channelId      String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  guild          Guild           @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  threads        Thread[]
  WelcomeSystem  WelcomeSystem?
  LeaveSystem    LeaveSystem?
  LogSystem      LogSystem?
  LockdownSystem LockdownSystem?
  ChatbotSystem  ChatbotSystem[]

  @@index([guildId])
}

model Thread {
  id            Int            @id @default(autoincrement())
  guildId       String
  channelId     String
  threadId      String         @unique
  guild         Guild          @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel       Channel        @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  ChatbotSystem ChatbotSystem?

  @@index([guildId])
  @@index([channelId])
}

model WelcomeSystem {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  channelId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model LeaveSystem {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  channelId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model LogSystem {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  channelId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model ChatbotSystem {
  id        Int      @id @default(autoincrement())
  guildId   String
  channelId String
  threadId  String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  thread    Thread   @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([guildId])
  @@index([channelId])
  @@index([userId])
}

model AfkSystem {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String   @unique
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([guildId])
}

model LockdownSystem {
  id        Int      @id @default(autoincrement())
  guildId   String
  channelId String   @unique
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}
