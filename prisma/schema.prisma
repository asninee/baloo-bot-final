generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("databaseUrl")
  relationMode = "prisma"
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  guildId   String
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  guild     Guild      @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  roles     Role[]
  AfkSystem AfkSystem?

  @@index([guildId])
}

model Guild {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  guildId        String           @unique
  updatedAt      DateTime         @updatedAt
  channels       Channel[]
  users          User[]
  roles          Role[]
  WelcomeSystem  WelcomeSystem?
  LeaveSystem    LeaveSystem?
  LogSystem      LogSystem?
  AfkSystem      AfkSystem[]
  LockdownSystem LockdownSystem[]
}

model Channel {
  id             Int             @id @default(autoincrement())
  guildId        String
  channelId      String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  guild          Guild           @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  WelcomeSystem  WelcomeSystem?
  LeaveSystem    LeaveSystem?
  LogSystem      LogSystem?
  LockdownSystem LockdownSystem?

  @@index([guildId])
}

model Role {
  id          Int      @id @default(autoincrement())
  description String
  emoji       String
  guildId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  users       User[]

  @@index([guildId])
}

model WelcomeSystem {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  channelId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model LeaveSystem {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  channelId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model LogSystem {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  channelId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model AfkSystem {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String   @unique
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([guildId])
}

model LockdownSystem {
  id        Int      @id @default(autoincrement())
  guildId   String
  channelId String   @unique
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([guildId])
}

model RoleToUser {
  A Int
  B Int

  @@unique([A, B], map: "_RoleToUser_AB_unique")
  @@index([B], map: "_RoleToUser_B_index")
  @@map("_RoleToUser")
}
